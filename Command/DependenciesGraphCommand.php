<?phpnamespace Kizilare\ServicesDebug\Command;use Kizilare\ServicesDebug\Helper\ConfigurationHelper;use Kizilare\ServicesDebug\Helper\DependenciesHolderHelper;use Kizilare\ServicesDebug\Processor\DependenciesProcessor;use Kizilare\ServicesDebug\Processor\GraphProcessor;use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;use Symfony\Component\Console\Command\Command;use Symfony\Component\Console\Input\InputArgument;use Symfony\Component\Console\Input\InputInterface;use Symfony\Component\Console\Output\OutputInterface;class DependenciesGraphCommand extends Command{    /**     * {@inheritdoc}     */    protected function configure()    {        $this            ->setName('dependencies:graph')            ->addArgument('config', InputArgument::REQUIRED, 'Configuration file to use')            ->addArgument('dependencies', InputArgument::REQUIRED, 'Dependencies file to use')            ->setDescription('Dependencies path from the file gene');    }    /**     * {@inheritdoc}     */    protected function execute(InputInterface $input, OutputInterface $output)    {        $configurationFile = $input->getArgument('config');        $configuration = new ConfigurationHelper($configurationFile);        $dependenciesHolder = new DependenciesHolderHelper($configuration);        $dependenciesHolder->load($input->getArgument('dependencies'));        $dependenciesProcessor = new DependenciesProcessor($configuration, $dependenciesHolder);        $graphProcessor = new GraphProcessor($configuration, $dependenciesHolder);        $output->writeln('Processing dependencies');        $dependenciesProcessor->processDependencies();        $output->writeln('Building graph Source');        $graphProcessor->build();    }}