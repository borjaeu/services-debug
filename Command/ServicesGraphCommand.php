<?phpnamespace Kizilare\ServicesDebug\Command;use Kizilare\ServicesDebug\Helper\DefinitionHelper;use Kizilare\ServicesDebug\Helper\Dot;use Kizilare\ServicesDebug\Helper\Graph;use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;use Symfony\Component\Console\Input\InputInterface;use Symfony\Component\Console\Input\InputOption;use Symfony\Component\Console\Output\OutputInterface;use Symfony\Component\DependencyInjection\ContainerBuilder;use Symfony\Component\DependencyInjection\Definition;use Symfony\Component\DependencyInjection\Reference;use Symfony\Component\DependencyInjection\Loader\XmlFileLoader;use Symfony\Component\Config\FileLocator;use Symfony\Component\Filesystem\Filesystem;use Symfony\Component\Yaml\Yaml;class ServicesGraphCommand extends ContainerAwareCommand{    /**     * {@inheritdoc}     */    protected function configure()    {        $this            ->setName('kizilare:graph:services')            ->addOption('ignore_dirs', null, InputOption::VALUE_REQUIRED, 'Directories to be ignored')            ->addOption('convert', null, InputOption::VALUE_NONE, 'The dot command convert to png shall be executed')            ->addOption('skip', null, InputOption::VALUE_REQUIRED, 'Services that will ignored', 'service_container,http_kernel,request,kernel')            ->setDescription('Services and classes dependencies path');    }    /**     * {@inheritdoc}     */    protected function execute(InputInterface $input, OutputInterface $output)    {        $this->getContainer()->get('kizilare.source_processor')->processSource('src/',explode(',', $input->getOption('ignore_dirs')));        //$this->getContainer()->get('kizilare.services_processor')->loadServices(explode(',', $input->getOption('skip')));    }}