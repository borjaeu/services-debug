<?phpnamespace Kizilare\ServicesDebug\Processor;use Kizilare\ServicesDebug\Helper\DefinitionHelper;use Kizilare\ServicesDebug\Helper\Dot;use Kizilare\ServicesDebug\Helper\Graph;use Symfony\Component\DependencyInjection\ContainerBuilder;use Symfony\Component\DependencyInjection\Definition;use Symfony\Component\DependencyInjection\Reference;use Symfony\Component\DependencyInjection\Loader\XmlFileLoader;use Symfony\Component\Config\FileLocator;use Symfony\Component\Filesystem\Filesystem;use Symfony\Component\Yaml\Yaml;class ServicesProcessor{    /**     * @var ContainerBuilder     */    private $containerBuilder;    /**     * @var Graph     */    private $graph;    /**     * @var Dot     */    private $dot;    /**     * @var array     */    private $ignoredServices;    /**     * @var array     */    private $debug = [        'services' => [],        'edges' => [],    ];    /**     * @var DefinitionHelper     */    private $definitionHelper;    /**     * ServicesProcessor constructor.     * @param string $cachedFile     * @param DefinitionHelper $definitionHelper     */    public function __construct($cachedFile, DefinitionHelper $definitionHelper)    {        $this->loadContainerBuilder($cachedFile);        $this->definitionHelper = $definitionHelper;    }    public function loadServices(array $ignoredServices)    {        $this->ignoredServices = $ignoredServices;        $this->graph = new Graph();        $this->dot = new Dot($this->graph);        $this->runCommand();        $this->clearIsolatedNodes();        $this->writeGraph();        $this->writeDebug();    }    /**     * {@inheritdoc}     */    private function runCommand()    {        $definitions = $this->containerBuilder->getDefinitions();        $total = 0;        $processed = 0;        foreach ($definitions as $serviceId => $definition) {            $total++;            if ($this->isAllowedDefinition($serviceId, $definition)) {                $processed++;                $this->addService($serviceId, $definition);            }        }    }    /**     * @param string $serviceId     * @param Definition $definition     */    private function addService($serviceId, Definition $definition)    {        $identifier = $this->definitionHelper->getDefinitionIdentifier($definition);        $this->registerService($serviceId, $definition, $identifier);        $this->graph->addNode($identifier);        $arguments = $definition->getArguments();        foreach ($arguments as $argument) {            if ($argument instanceof Reference) {                /** @var Reference $argument */                $argumentDefinition = $this->containerBuilder->findDefinition((string) $argument);                if ($this->isAllowedDefinition($argument, $argumentDefinition)) {                    $targetIdentifier = $this->definitionHelper->getDefinitionIdentifier($argumentDefinition);                    $this->addEdge($serviceId, $identifier, $targetIdentifier);                }            }        }    }    /**     * @param string $serviceId     * @param Definition $definition     * @return bool     */    private function isAllowedDefinition($serviceId, Definition $definition)    {        if (in_array($serviceId, $this->ignoredServices)) {            return false;        }        if ($this->definitionHelper->getVendorName($definition)) {            return false;        }        return true;    }    /**     * Loads the ContainerBuilder from the cache.     *     * @param string $cachedFile     * @return ContainerBuilder     */    private function loadContainerBuilder($cachedFile)    {        $container = new ContainerBuilder();        $loader = new XmlFileLoader($container, new FileLocator());        $loader->load($cachedFile);        return $this->containerBuilder = $container;    }    /**     * Write graph information to file     */    private function writeGraph()    {        $dotCode = $this->dot->getDotCode();        $fileSystem = new Filesystem();        $fileSystem->dumpFile('services.dot', $dotCode);        $command = 'dot services.dot -Tpng -o services.png';        shell_exec($command);    }    private function clearIsolatedNodes()    {        $emptyNodes = $this->graph->getEmptyNodes();        foreach ($emptyNodes as $emptyNode) {            $this->graph->removeNode($emptyNode);        }    }    /**     * @param string $serviceId     * @param string $source     * @param string $target     */    private function addEdge($serviceId, $source, $target)    {        $edgeId = $source . ' -> ' . $target;        if (!isset($this->debug['edges'][$edgeId])) {            $this->debug['edges'][$edgeId] = [];        }        $this->debug['edges'][$edgeId][] = $serviceId;        $this->graph->addEdge($source, $target);        $this->dot->setEdgeOptions($source, $target, ['label' => 'x' . count($this->debug['edges'][$edgeId])]);    }    /**     * @param $serviceId     * @param Definition $definition     * @param $identifier     */    private function registerService($serviceId, Definition $definition, $identifier)    {        if (!isset($this->debug['services'][$identifier])) {            $this->debug['services'][$identifier] = [];        }        $this->debug['services'][$identifier][$serviceId] = $definition->getClass();    }    private function writeDebug()    {        $debug = Yaml::dump($this->debug, 4);        $fileSystem = new Filesystem();        $fileSystem->dumpFile('services_debug.yml', $debug);    }}